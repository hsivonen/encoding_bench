# HG changeset patch
# User Henri Sivonen <hsivonen@hsivonen.fi>
# Date 1476099337 -10800
#      Mon Oct 10 14:35:37 2016 +0300
# Node ID 20b0566d3ad9e7e3469cfd98e75835b9d3e47095
# Parent  027ab974b5b531d134601b7a006fc0c173fbdfed
Export uconv testing functions and disable various unnecessary things that could interfere.

MozReview-Commit-ID: JjLex95VNEl

diff --git a/intl/uconv/nsUConvModule.cpp b/intl/uconv/nsUConvModule.cpp
--- a/intl/uconv/nsUConvModule.cpp
+++ b/intl/uconv/nsUConvModule.cpp
@@ -1,16 +1,18 @@
 /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 #include "mozilla/ModuleUtils.h"
 #include "nsEncoderDecoderUtils.h"
 #include "nsIUnicodeDecoder.h"
 #include "nsIUnicodeEncoder.h"
+#include "mozilla/dom/EncodingUtils.h"
+#include "mozilla/Unused.h"
 
 #include "nsUConvCID.h"
 #include "nsTextToSubURI.h"
 #include "nsUTF8ConverterService.h"
 #include "nsConverterInputStream.h"
 #include "nsConverterOutputStream.h"
 #include "nsScriptableUConv.h"
 #include "nsIOutputStream.h"
@@ -575,8 +577,73 @@ static const mozilla::Module::ContractID
 static const mozilla::Module kUConvModule = {
   mozilla::Module::kVersion,
   kUConvCIDs,
   kUConvContracts,
   kUConvCategories
 };
 
 NSMODULE_DEFN(nsUConvModule) = &kUConvModule;
+
+EXPORT_XPCOM_API(nsIUnicodeDecoder*)
+NS_CreateUnicodeDecoder(const char* aName, size_t aNameLen)
+{
+  nsDependentCSubstring encoding(aName, aNameLen);
+  nsAutoCString contractId(NS_UNICODEDECODER_CONTRACTID_BASE);
+  contractId.Append(encoding);
+
+  nsCOMPtr<nsIUnicodeDecoder> decoder = do_CreateInstance(contractId.get());
+  MOZ_RELEASE_ASSERT(decoder, "Tried to create decoder for unknown encoding.");
+  return decoder.forget().take();
+}
+
+EXPORT_XPCOM_API(void)
+NS_ReleaseUnicodeDecoder(nsIUnicodeDecoder* aDecoder)
+{
+  NS_RELEASE(aDecoder);
+}
+
+EXPORT_XPCOM_API(void)
+NS_DecodeWithUnicodeDecoder(nsIUnicodeDecoder* aDecoder, const char* aSrc, int32_t aSrcLength,
+    char16_t* aDest, int32_t aDestLength)
+{
+  int32_t oldLen = aSrcLength;
+  MOZ_RELEASE_ASSERT(aDecoder->Convert(aSrc, &aSrcLength, aDest, &aDestLength) == NS_OK);
+  MOZ_RELEASE_ASSERT(aSrcLength == oldLen);
+  aDecoder->Reset();
+}
+
+EXPORT_XPCOM_API(nsIUnicodeEncoder*)
+NS_CreateUnicodeEncoder(const char* aName, size_t aNameLen)
+{
+  nsDependentCSubstring encoding(aName, aNameLen);
+  nsAutoCString contractId(NS_UNICODEENCODER_CONTRACTID_BASE);
+  contractId.Append(encoding);
+
+  nsCOMPtr<nsIUnicodeEncoder> encoder = do_CreateInstance(contractId.get());
+  MOZ_RELEASE_ASSERT(encoder, "Tried to create decoder for unknown encoding.");
+  return encoder.forget().take();
+}
+
+EXPORT_XPCOM_API(void)
+NS_ReleaseUnicodeEncoder(nsIUnicodeEncoder* aEncoder)
+{
+  NS_RELEASE(aEncoder);
+}
+
+EXPORT_XPCOM_API(void)
+NS_EncodeWithUnicodeEncoder(nsIUnicodeEncoder* aEncoder, const char16_t* aSrc, int32_t aSrcLength,
+    char* aDest, int32_t aDestLength)
+{
+  int32_t oldLen = aSrcLength;
+  MOZ_RELEASE_ASSERT(aEncoder->Convert(aSrc, &aSrcLength, aDest, &aDestLength) == NS_OK);
+  MOZ_RELEASE_ASSERT(aSrcLength == oldLen);
+  aEncoder->Reset();
+}
+
+EXPORT_XPCOM_API(int32_t)
+NS_FindEncodingForLabel(const char* aName, size_t aNameLen)
+{
+  nsDependentCSubstring label(aName, aNameLen);
+  nsAutoCString encoding;
+  mozilla::Unused << mozilla::dom::EncodingUtils::FindEncodingForLabel(label, encoding);
+  return encoding.Length();
+}
diff --git a/xpcom/build/XPCOMInit.cpp b/xpcom/build/XPCOMInit.cpp
--- a/xpcom/build/XPCOMInit.cpp
+++ b/xpcom/build/XPCOMInit.cpp
@@ -650,53 +650,53 @@ NS_InitXPCOM2(nsIServiceManager** aResul
   nsCycleCollector_startup();
 
   // Register ICU memory functions.  This really shouldn't be necessary: the
   // JS engine should do this on its own inside JS_Init, and memory-reporting
   // code should call a JSAPI function to observe ICU memory usage.  But we
   // can't define the alloc/free functions in the JS engine, because it can't
   // depend on the XPCOM-based memory reporting goop.  So for now, we have
   // this oddness.
-  mozilla::SetICUMemoryFunctions();
+//  mozilla::SetICUMemoryFunctions();
 
   // Do the same for libogg.
-  ogg_set_mem_functions(OggReporter::CountingMalloc,
-                        OggReporter::CountingCalloc,
-                        OggReporter::CountingRealloc,
-                        OggReporter::CountingFree);
-
-#if defined(MOZ_VPX) && !defined(MOZ_VPX_NO_MEM_REPORTING)
-  // And for VPX.
-  vpx_mem_set_functions(VPXReporter::CountingMalloc,
-                        VPXReporter::CountingCalloc,
-                        VPXReporter::CountingRealloc,
-                        VPXReporter::CountingFree,
-                        memcpy,
-                        memset,
-                        memmove);
-#endif
-
-#if EXPOSE_INTL_API && defined(MOZ_ICU_DATA_ARCHIVE)
-  nsCOMPtr<nsIFile> greDir;
-  nsDirectoryService::gService->Get(NS_GRE_DIR,
-                                    NS_GET_IID(nsIFile),
-                                    getter_AddRefs(greDir));
-  MOZ_ASSERT(greDir);
-  nsAutoCString nativeGREPath;
-  greDir->GetNativePath(nativeGREPath);
-  u_setDataDirectory(nativeGREPath.get());
-#endif
-
-  // Initialize the JS engine.
-  const char* jsInitFailureReason = JS_InitWithFailureDiagnostic();
-  if (jsInitFailureReason) {
-    NS_RUNTIMEABORT(jsInitFailureReason);
-  }
-  sInitializedJS = true;
-  
+//  ogg_set_mem_functions(OggReporter::CountingMalloc,
+//                        OggReporter::CountingCalloc,
+//                        OggReporter::CountingRealloc,
+//                        OggReporter::CountingFree);
+//
+//#if defined(MOZ_VPX) && !defined(MOZ_VPX_NO_MEM_REPORTING)
+//  // And for VPX.
+//  vpx_mem_set_functions(VPXReporter::CountingMalloc,
+//                        VPXReporter::CountingCalloc,
+//                        VPXReporter::CountingRealloc,
+//                        VPXReporter::CountingFree,
+//                        memcpy,
+//                        memset,
+//                        memmove);
+//#endif
+//
+//#if EXPOSE_INTL_API && defined(MOZ_ICU_DATA_ARCHIVE)
+//  nsCOMPtr<nsIFile> greDir;
+//  nsDirectoryService::gService->Get(NS_GRE_DIR,
+//                                    NS_GET_IID(nsIFile),
+//                                    getter_AddRefs(greDir));
+//  MOZ_ASSERT(greDir);
+//  nsAutoCString nativeGREPath;
+//  greDir->GetNativePath(nativeGREPath);
+//  u_setDataDirectory(nativeGREPath.get());
+//#endif
+//
+//  // Initialize the JS engine.
+//  const char* jsInitFailureReason = JS_InitWithFailureDiagnostic();
+//  if (jsInitFailureReason) {
+//    NS_RUNTIMEABORT(jsInitFailureReason);
+//  }
+//  sInitializedJS = true;
+//
   // Init AbstractThread.
   AbstractThread::InitStatics();
 
   rv = nsComponentManagerImpl::gComponentManager->Init();
   if (NS_FAILED(rv)) {
     NS_RELEASE(nsComponentManagerImpl::gComponentManager);
     return rv;
   }
@@ -714,18 +714,18 @@ NS_InitXPCOM2(nsIServiceManager** aResul
   // to the directory service.
   nsDirectoryService::gService->RegisterCategoryProviders();
 
   // Init SharedThreadPool (which needs the service manager).
   SharedThreadPool::InitStatics();
 
   // Force layout to spin up so that nsContentUtils is available for cx stack
   // munging.
-  nsCOMPtr<nsISupports> componentLoader =
-    do_GetService("@mozilla.org/moz/jsloader;1");
+//  nsCOMPtr<nsISupports> componentLoader =
+//    do_GetService("@mozilla.org/moz/jsloader;1");
 
   mozilla::scache::StartupCache::GetSingleton();
   mozilla::AvailableMemoryTracker::Activate();
 
   // Notify observers of xpcom autoregistration start
   NS_CreateServicesFromCategory(NS_XPCOM_STARTUP_CATEGORY,
                                 nullptr,
                                 NS_XPCOM_STARTUP_OBSERVER_ID);
diff --git a/xpcom/io/nsDirectoryService.cpp b/xpcom/io/nsDirectoryService.cpp
--- a/xpcom/io/nsDirectoryService.cpp
+++ b/xpcom/io/nsDirectoryService.cpp
@@ -169,17 +169,17 @@ nsDirectoryService::GetCurrentProcessDir
       return NS_OK;
     }
   }
 #if defined(DEBUG)
   static bool firstWarning = true;
 
   if ((!moz5 || !*moz5) && firstWarning) {
     // Warn that MOZILLA_FIVE_HOME not set, once.
-    printf("Warning: MOZILLA_FIVE_HOME not set.\n");
+//    printf("Warning: MOZILLA_FIVE_HOME not set.\n");
     firstWarning = false;
   }
 #endif /* DEBUG */
 
   // Fall back to current directory.
   if (getcwd(buf, sizeof(buf))) {
     localFile->InitWithNativePath(nsDependentCString(buf));
     localFile.forget(aFile);
diff --git a/xpcom/string/nsSubstring.cpp b/xpcom/string/nsSubstring.cpp
--- a/xpcom/string/nsSubstring.cpp
+++ b/xpcom/string/nsSubstring.cpp
@@ -65,35 +65,35 @@ public:
   {
     // this is a hack to suppress duplicate string stats printing
     // in seamonkey as a result of the string code being linked
     // into seamonkey and libxpcom! :-(
     if (!mAllocCount && !mAdoptCount) {
       return;
     }
 
-    printf("nsStringStats\n");
-    printf(" => mAllocCount:     % 10d\n", int(mAllocCount));
-    printf(" => mReallocCount:   % 10d\n", int(mReallocCount));
-    printf(" => mFreeCount:      % 10d", int(mFreeCount));
-    if (mAllocCount > mFreeCount) {
-      printf("  --  LEAKED %d !!!\n", mAllocCount - mFreeCount);
-    } else {
-      printf("\n");
-    }
-    printf(" => mShareCount:     % 10d\n", int(mShareCount));
-    printf(" => mAdoptCount:     % 10d\n", int(mAdoptCount));
-    printf(" => mAdoptFreeCount: % 10d", int(mAdoptFreeCount));
-    if (mAdoptCount > mAdoptFreeCount) {
-      printf("  --  LEAKED %d !!!\n", mAdoptCount - mAdoptFreeCount);
-    } else {
-      printf("\n");
-    }
-    printf(" => Process ID: %" PRIuPTR ", Thread ID: %" PRIuPTR "\n",
-           uintptr_t(getpid()), uintptr_t(pthread_self()));
+//    printf("nsStringStats\n");
+//    printf(" => mAllocCount:     % 10d\n", int(mAllocCount));
+//    printf(" => mReallocCount:   % 10d\n", int(mReallocCount));
+//    printf(" => mFreeCount:      % 10d", int(mFreeCount));
+//    if (mAllocCount > mFreeCount) {
+//      printf("  --  LEAKED %d !!!\n", mAllocCount - mFreeCount);
+//    } else {
+//      printf("\n");
+//    }
+//    printf(" => mShareCount:     % 10d\n", int(mShareCount));
+//    printf(" => mAdoptCount:     % 10d\n", int(mAdoptCount));
+//    printf(" => mAdoptFreeCount: % 10d", int(mAdoptFreeCount));
+//    if (mAdoptCount > mAdoptFreeCount) {
+//      printf("  --  LEAKED %d !!!\n", mAdoptCount - mAdoptFreeCount);
+//    } else {
+//      printf("\n");
+//    }
+//    printf(" => Process ID: %" PRIuPTR ", Thread ID: %" PRIuPTR "\n",
+//           uintptr_t(getpid()), uintptr_t(pthread_self()));
   }
 
   Atomic<int32_t> mAllocCount;
   Atomic<int32_t> mReallocCount;
   Atomic<int32_t> mFreeCount;
   Atomic<int32_t> mShareCount;
   Atomic<int32_t> mAdoptCount;
   Atomic<int32_t> mAdoptFreeCount;
